"use strict";var _createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||false;i.configurable=true;if("value"in i)i.writable=true;Object.defineProperty(e,i.key,i)}}return function(e,t,n){if(t)i(e.prototype,t);if(n)i(e,n);return e}}();function _classCallCheck(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}var Dropload=function(){function t(e){_classCallCheck(this,t);this._windowHeight=0;this._containerHeight=0;this._isScrollB=false;this._distanceEnd=e.distanceEnd?e.distanceEnd:100;this.callback=e.success?e.success:function(){throw new Error("请添加触底时回调函数！")};this.init();this.listenWindowScroll();this.listenResize()}_createClass(t,[{key:"init",value:function e(){this._windowHeight=this.initWindoHeight();this._containerHeight=this.initContainerHeight()}},{key:"initWindoHeight",value:function e(){var t=0;if(document.body.clientHeight&&document.documentElement.clientHeight){t=Math.min(document.body.clientHeight,document.documentElement.clientHeight)}else{t=Math.max(document.body.clientHeight,document.documentElement.clientHeight)}return t}},{key:"initContainerHeight",value:function e(){var t=document.querySelector(".container");var n=0;try{n=t.offsetHeight}catch(e){throw new Error("请添加添加类为container的容器！")}return n}},{key:"refresh",value:function e(){this.init();this._isScrollB=false}},{key:"listenWindowScroll",value:function e(){var t=this;window.addEventListener("scroll",function(){var e=document.documentElement.scrollTop||document.body.scrollTop;if(e+t._windowHeight>=t._containerHeight-t._distanceEnd){if(!t._isScrollB){t.callback()}t._isScrollB=true}})}},{key:"listenResize",value:function e(){var t=this;window.addEventListener("resize",function(){t.init()})}}]);return t}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
